// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protobuff.proto
// Protobuf C++ Version: 5.29.3

#ifndef protobuff_2eproto_2epb_2eh
#define protobuff_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protobuff_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuff_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_protobuff_2eproto;
namespace protobuff {
class DeviceRequest;
struct DeviceRequestDefaultTypeInternal;
extern DeviceRequestDefaultTypeInternal _DeviceRequest_default_instance_;
class JobStatusReply;
struct JobStatusReplyDefaultTypeInternal;
extern JobStatusReplyDefaultTypeInternal _JobStatusReply_default_instance_;
class JobStatusRequest;
struct JobStatusRequestDefaultTypeInternal;
extern JobStatusRequestDefaultTypeInternal _JobStatusRequest_default_instance_;
class ResultResponse;
struct ResultResponseDefaultTypeInternal;
extern ResultResponseDefaultTypeInternal _ResultResponse_default_instance_;
class TaskAssignment;
struct TaskAssignmentDefaultTypeInternal;
extern TaskAssignmentDefaultTypeInternal _TaskAssignment_default_instance_;
class TaskRequest;
struct TaskRequestDefaultTypeInternal;
extern TaskRequestDefaultTypeInternal _TaskRequest_default_instance_;
class TaskResponse;
struct TaskResponseDefaultTypeInternal;
extern TaskResponseDefaultTypeInternal _TaskResponse_default_instance_;
class TaskResult;
struct TaskResultDefaultTypeInternal;
extern TaskResultDefaultTypeInternal _TaskResult_default_instance_;
}  // namespace protobuff
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace protobuff {

// ===================================================================


// -------------------------------------------------------------------

class TaskResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuff.TaskResult) */ {
 public:
  inline TaskResult() : TaskResult(nullptr) {}
  ~TaskResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TaskResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TaskResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TaskResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline TaskResult(const TaskResult& from) : TaskResult(nullptr, from) {}
  inline TaskResult(TaskResult&& from) noexcept
      : TaskResult(nullptr, std::move(from)) {}
  inline TaskResult& operator=(const TaskResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskResult& operator=(TaskResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskResult* internal_default_instance() {
    return reinterpret_cast<const TaskResult*>(
        &_TaskResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(TaskResult& a, TaskResult& b) { a.Swap(&b); }
  inline void Swap(TaskResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TaskResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TaskResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TaskResult& from) { TaskResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TaskResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "protobuff.TaskResult"; }

 protected:
  explicit TaskResult(::google::protobuf::Arena* arena);
  TaskResult(::google::protobuf::Arena* arena, const TaskResult& from);
  TaskResult(::google::protobuf::Arena* arena, TaskResult&& from) noexcept
      : TaskResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDeviceIdFieldNumber = 1,
    kJobIdFieldNumber = 2,
    kTaskIdFieldNumber = 3,
    kResultDataFieldNumber = 4,
    kFlopsFieldNumber = 5,
  };
  // string device_id = 1;
  void clear_device_id() ;
  const std::string& device_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_id(Arg_&& arg, Args_... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* value);

  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(
      const std::string& value);
  std::string* _internal_mutable_device_id();

  public:
  // string job_id = 2;
  void clear_job_id() ;
  const std::string& job_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_job_id(Arg_&& arg, Args_... args);
  std::string* mutable_job_id();
  PROTOBUF_NODISCARD std::string* release_job_id();
  void set_allocated_job_id(std::string* value);

  private:
  const std::string& _internal_job_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_job_id(
      const std::string& value);
  std::string* _internal_mutable_job_id();

  public:
  // string task_id = 3;
  void clear_task_id() ;
  const std::string& task_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_task_id(Arg_&& arg, Args_... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* value);

  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(
      const std::string& value);
  std::string* _internal_mutable_task_id();

  public:
  // bytes result_data = 4;
  void clear_result_data() ;
  const std::string& result_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_result_data(Arg_&& arg, Args_... args);
  std::string* mutable_result_data();
  PROTOBUF_NODISCARD std::string* release_result_data();
  void set_allocated_result_data(std::string* value);

  private:
  const std::string& _internal_result_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_data(
      const std::string& value);
  std::string* _internal_mutable_result_data();

  public:
  // int32 flops = 5;
  void clear_flops() ;
  ::int32_t flops() const;
  void set_flops(::int32_t value);

  private:
  ::int32_t _internal_flops() const;
  void _internal_set_flops(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protobuff.TaskResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TaskResult& from_msg);
    ::google::protobuf::internal::ArenaStringPtr device_id_;
    ::google::protobuf::internal::ArenaStringPtr job_id_;
    ::google::protobuf::internal::ArenaStringPtr task_id_;
    ::google::protobuf::internal::ArenaStringPtr result_data_;
    ::int32_t flops_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuff_2eproto;
};
// -------------------------------------------------------------------

class TaskResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuff.TaskResponse) */ {
 public:
  inline TaskResponse() : TaskResponse(nullptr) {}
  ~TaskResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TaskResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TaskResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TaskResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline TaskResponse(const TaskResponse& from) : TaskResponse(nullptr, from) {}
  inline TaskResponse(TaskResponse&& from) noexcept
      : TaskResponse(nullptr, std::move(from)) {}
  inline TaskResponse& operator=(const TaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskResponse& operator=(TaskResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskResponse* internal_default_instance() {
    return reinterpret_cast<const TaskResponse*>(
        &_TaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(TaskResponse& a, TaskResponse& b) { a.Swap(&b); }
  inline void Swap(TaskResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TaskResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TaskResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TaskResponse& from) { TaskResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TaskResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "protobuff.TaskResponse"; }

 protected:
  explicit TaskResponse(::google::protobuf::Arena* arena);
  TaskResponse(::google::protobuf::Arena* arena, const TaskResponse& from);
  TaskResponse(::google::protobuf::Arena* arena, TaskResponse&& from) noexcept
      : TaskResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kAcceptedFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool accepted = 1;
  void clear_accepted() ;
  bool accepted() const;
  void set_accepted(bool value);

  private:
  bool _internal_accepted() const;
  void _internal_set_accepted(bool value);

  public:
  // @@protoc_insertion_point(class_scope:protobuff.TaskResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      38, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TaskResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool accepted_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuff_2eproto;
};
// -------------------------------------------------------------------

class TaskRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuff.TaskRequest) */ {
 public:
  inline TaskRequest() : TaskRequest(nullptr) {}
  ~TaskRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TaskRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TaskRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TaskRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline TaskRequest(const TaskRequest& from) : TaskRequest(nullptr, from) {}
  inline TaskRequest(TaskRequest&& from) noexcept
      : TaskRequest(nullptr, std::move(from)) {}
  inline TaskRequest& operator=(const TaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskRequest& operator=(TaskRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskRequest* internal_default_instance() {
    return reinterpret_cast<const TaskRequest*>(
        &_TaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(TaskRequest& a, TaskRequest& b) { a.Swap(&b); }
  inline void Swap(TaskRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TaskRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TaskRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TaskRequest& from) { TaskRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TaskRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "protobuff.TaskRequest"; }

 protected:
  explicit TaskRequest(::google::protobuf::Arena* arena);
  TaskRequest(::google::protobuf::Arena* arena, const TaskRequest& from);
  TaskRequest(::google::protobuf::Arena* arena, TaskRequest&& from) noexcept
      : TaskRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kJobIdFieldNumber = 2,
    kOperationFieldNumber = 3,
    kADataFieldNumber = 4,
    kBDataFieldNumber = 5,
    kScaleBytesFieldNumber = 6,
    kScaleScalarFieldNumber = 7,
    kRowSplitsFieldNumber = 8,
    kColSplitsFieldNumber = 9,
    kMFieldNumber = 10,
    kNFieldNumber = 11,
    kDFieldNumber = 12,
  };
  // string job_id = 2;
  void clear_job_id() ;
  const std::string& job_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_job_id(Arg_&& arg, Args_... args);
  std::string* mutable_job_id();
  PROTOBUF_NODISCARD std::string* release_job_id();
  void set_allocated_job_id(std::string* value);

  private:
  const std::string& _internal_job_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_job_id(
      const std::string& value);
  std::string* _internal_mutable_job_id();

  public:
  // string operation = 3;
  void clear_operation() ;
  const std::string& operation() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_operation(Arg_&& arg, Args_... args);
  std::string* mutable_operation();
  PROTOBUF_NODISCARD std::string* release_operation();
  void set_allocated_operation(std::string* value);

  private:
  const std::string& _internal_operation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operation(
      const std::string& value);
  std::string* _internal_mutable_operation();

  public:
  // bytes a_data = 4;
  void clear_a_data() ;
  const std::string& a_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_a_data(Arg_&& arg, Args_... args);
  std::string* mutable_a_data();
  PROTOBUF_NODISCARD std::string* release_a_data();
  void set_allocated_a_data(std::string* value);

  private:
  const std::string& _internal_a_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_a_data(
      const std::string& value);
  std::string* _internal_mutable_a_data();

  public:
  // bytes b_data = 5;
  void clear_b_data() ;
  const std::string& b_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_b_data(Arg_&& arg, Args_... args);
  std::string* mutable_b_data();
  PROTOBUF_NODISCARD std::string* release_b_data();
  void set_allocated_b_data(std::string* value);

  private:
  const std::string& _internal_b_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_b_data(
      const std::string& value);
  std::string* _internal_mutable_b_data();

  public:
  // optional bytes scale_bytes = 6;
  bool has_scale_bytes() const;
  void clear_scale_bytes() ;
  const std::string& scale_bytes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_scale_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_scale_bytes();
  PROTOBUF_NODISCARD std::string* release_scale_bytes();
  void set_allocated_scale_bytes(std::string* value);

  private:
  const std::string& _internal_scale_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scale_bytes(
      const std::string& value);
  std::string* _internal_mutable_scale_bytes();

  public:
  // optional float scale_scalar = 7;
  bool has_scale_scalar() const;
  void clear_scale_scalar() ;
  float scale_scalar() const;
  void set_scale_scalar(float value);

  private:
  float _internal_scale_scalar() const;
  void _internal_set_scale_scalar(float value);

  public:
  // int32 row_splits = 8;
  void clear_row_splits() ;
  ::int32_t row_splits() const;
  void set_row_splits(::int32_t value);

  private:
  ::int32_t _internal_row_splits() const;
  void _internal_set_row_splits(::int32_t value);

  public:
  // int32 col_splits = 9;
  void clear_col_splits() ;
  ::int32_t col_splits() const;
  void set_col_splits(::int32_t value);

  private:
  ::int32_t _internal_col_splits() const;
  void _internal_set_col_splits(::int32_t value);

  public:
  // int32 m = 10;
  void clear_m() ;
  ::int32_t m() const;
  void set_m(::int32_t value);

  private:
  ::int32_t _internal_m() const;
  void _internal_set_m(::int32_t value);

  public:
  // int32 n = 11;
  void clear_n() ;
  ::int32_t n() const;
  void set_n(::int32_t value);

  private:
  ::int32_t _internal_n() const;
  void _internal_set_n(::int32_t value);

  public:
  // int32 d = 12;
  void clear_d() ;
  ::int32_t d() const;
  void set_d(::int32_t value);

  private:
  ::int32_t _internal_d() const;
  void _internal_set_d(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protobuff.TaskRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 0,
      53, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TaskRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr job_id_;
    ::google::protobuf::internal::ArenaStringPtr operation_;
    ::google::protobuf::internal::ArenaStringPtr a_data_;
    ::google::protobuf::internal::ArenaStringPtr b_data_;
    ::google::protobuf::internal::ArenaStringPtr scale_bytes_;
    float scale_scalar_;
    ::int32_t row_splits_;
    ::int32_t col_splits_;
    ::int32_t m_;
    ::int32_t n_;
    ::int32_t d_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuff_2eproto;
};
// -------------------------------------------------------------------

class TaskAssignment final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuff.TaskAssignment) */ {
 public:
  inline TaskAssignment() : TaskAssignment(nullptr) {}
  ~TaskAssignment() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TaskAssignment* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TaskAssignment));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TaskAssignment(
      ::google::protobuf::internal::ConstantInitialized);

  inline TaskAssignment(const TaskAssignment& from) : TaskAssignment(nullptr, from) {}
  inline TaskAssignment(TaskAssignment&& from) noexcept
      : TaskAssignment(nullptr, std::move(from)) {}
  inline TaskAssignment& operator=(const TaskAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskAssignment& operator=(TaskAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskAssignment* internal_default_instance() {
    return reinterpret_cast<const TaskAssignment*>(
        &_TaskAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(TaskAssignment& a, TaskAssignment& b) { a.Swap(&b); }
  inline void Swap(TaskAssignment* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskAssignment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskAssignment* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TaskAssignment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TaskAssignment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TaskAssignment& from) { TaskAssignment::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TaskAssignment* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "protobuff.TaskAssignment"; }

 protected:
  explicit TaskAssignment(::google::protobuf::Arena* arena);
  TaskAssignment(::google::protobuf::Arena* arena, const TaskAssignment& from);
  TaskAssignment(::google::protobuf::Arena* arena, TaskAssignment&& from) noexcept
      : TaskAssignment(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kJobIdFieldNumber = 1,
    kTaskIdFieldNumber = 2,
    kOperationFieldNumber = 3,
    kADataFieldNumber = 4,
    kBDataFieldNumber = 5,
    kScaleBytesFieldNumber = 6,
    kScaleScalarFieldNumber = 7,
    kMFieldNumber = 8,
    kNFieldNumber = 9,
    kDFieldNumber = 10,
  };
  // string job_id = 1;
  void clear_job_id() ;
  const std::string& job_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_job_id(Arg_&& arg, Args_... args);
  std::string* mutable_job_id();
  PROTOBUF_NODISCARD std::string* release_job_id();
  void set_allocated_job_id(std::string* value);

  private:
  const std::string& _internal_job_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_job_id(
      const std::string& value);
  std::string* _internal_mutable_job_id();

  public:
  // string task_id = 2;
  void clear_task_id() ;
  const std::string& task_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_task_id(Arg_&& arg, Args_... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* value);

  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(
      const std::string& value);
  std::string* _internal_mutable_task_id();

  public:
  // string operation = 3;
  void clear_operation() ;
  const std::string& operation() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_operation(Arg_&& arg, Args_... args);
  std::string* mutable_operation();
  PROTOBUF_NODISCARD std::string* release_operation();
  void set_allocated_operation(std::string* value);

  private:
  const std::string& _internal_operation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operation(
      const std::string& value);
  std::string* _internal_mutable_operation();

  public:
  // bytes a_data = 4;
  void clear_a_data() ;
  const std::string& a_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_a_data(Arg_&& arg, Args_... args);
  std::string* mutable_a_data();
  PROTOBUF_NODISCARD std::string* release_a_data();
  void set_allocated_a_data(std::string* value);

  private:
  const std::string& _internal_a_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_a_data(
      const std::string& value);
  std::string* _internal_mutable_a_data();

  public:
  // bytes b_data = 5;
  void clear_b_data() ;
  const std::string& b_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_b_data(Arg_&& arg, Args_... args);
  std::string* mutable_b_data();
  PROTOBUF_NODISCARD std::string* release_b_data();
  void set_allocated_b_data(std::string* value);

  private:
  const std::string& _internal_b_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_b_data(
      const std::string& value);
  std::string* _internal_mutable_b_data();

  public:
  // optional bytes scale_bytes = 6;
  bool has_scale_bytes() const;
  void clear_scale_bytes() ;
  const std::string& scale_bytes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_scale_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_scale_bytes();
  PROTOBUF_NODISCARD std::string* release_scale_bytes();
  void set_allocated_scale_bytes(std::string* value);

  private:
  const std::string& _internal_scale_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scale_bytes(
      const std::string& value);
  std::string* _internal_mutable_scale_bytes();

  public:
  // optional float scale_scalar = 7;
  bool has_scale_scalar() const;
  void clear_scale_scalar() ;
  float scale_scalar() const;
  void set_scale_scalar(float value);

  private:
  float _internal_scale_scalar() const;
  void _internal_set_scale_scalar(float value);

  public:
  // int32 m = 8;
  void clear_m() ;
  ::int32_t m() const;
  void set_m(::int32_t value);

  private:
  ::int32_t _internal_m() const;
  void _internal_set_m(::int32_t value);

  public:
  // int32 n = 9;
  void clear_n() ;
  ::int32_t n() const;
  void set_n(::int32_t value);

  private:
  ::int32_t _internal_n() const;
  void _internal_set_n(::int32_t value);

  public:
  // int32 d = 10;
  void clear_d() ;
  ::int32_t d() const;
  void set_d(::int32_t value);

  private:
  ::int32_t _internal_d() const;
  void _internal_set_d(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protobuff.TaskAssignment)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 0,
      63, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TaskAssignment& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr job_id_;
    ::google::protobuf::internal::ArenaStringPtr task_id_;
    ::google::protobuf::internal::ArenaStringPtr operation_;
    ::google::protobuf::internal::ArenaStringPtr a_data_;
    ::google::protobuf::internal::ArenaStringPtr b_data_;
    ::google::protobuf::internal::ArenaStringPtr scale_bytes_;
    float scale_scalar_;
    ::int32_t m_;
    ::int32_t n_;
    ::int32_t d_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuff_2eproto;
};
// -------------------------------------------------------------------

class ResultResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuff.ResultResponse) */ {
 public:
  inline ResultResponse() : ResultResponse(nullptr) {}
  ~ResultResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResultResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResultResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResultResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResultResponse(const ResultResponse& from) : ResultResponse(nullptr, from) {}
  inline ResultResponse(ResultResponse&& from) noexcept
      : ResultResponse(nullptr, std::move(from)) {}
  inline ResultResponse& operator=(const ResultResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultResponse& operator=(ResultResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResultResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResultResponse* internal_default_instance() {
    return reinterpret_cast<const ResultResponse*>(
        &_ResultResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(ResultResponse& a, ResultResponse& b) { a.Swap(&b); }
  inline void Swap(ResultResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResultResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResultResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResultResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResultResponse& from) { ResultResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResultResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "protobuff.ResultResponse"; }

 protected:
  explicit ResultResponse(::google::protobuf::Arena* arena);
  ResultResponse(::google::protobuf::Arena* arena, const ResultResponse& from);
  ResultResponse(::google::protobuf::Arena* arena, ResultResponse&& from) noexcept
      : ResultResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:protobuff.ResultResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResultResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuff_2eproto;
};
// -------------------------------------------------------------------

class JobStatusRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuff.JobStatusRequest) */ {
 public:
  inline JobStatusRequest() : JobStatusRequest(nullptr) {}
  ~JobStatusRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(JobStatusRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(JobStatusRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR JobStatusRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline JobStatusRequest(const JobStatusRequest& from) : JobStatusRequest(nullptr, from) {}
  inline JobStatusRequest(JobStatusRequest&& from) noexcept
      : JobStatusRequest(nullptr, std::move(from)) {}
  inline JobStatusRequest& operator=(const JobStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobStatusRequest& operator=(JobStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobStatusRequest* internal_default_instance() {
    return reinterpret_cast<const JobStatusRequest*>(
        &_JobStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(JobStatusRequest& a, JobStatusRequest& b) { a.Swap(&b); }
  inline void Swap(JobStatusRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobStatusRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobStatusRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<JobStatusRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JobStatusRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const JobStatusRequest& from) { JobStatusRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(JobStatusRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "protobuff.JobStatusRequest"; }

 protected:
  explicit JobStatusRequest(::google::protobuf::Arena* arena);
  JobStatusRequest(::google::protobuf::Arena* arena, const JobStatusRequest& from);
  JobStatusRequest(::google::protobuf::Arena* arena, JobStatusRequest&& from) noexcept
      : JobStatusRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kJobIdFieldNumber = 1,
  };
  // string job_id = 1;
  void clear_job_id() ;
  const std::string& job_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_job_id(Arg_&& arg, Args_... args);
  std::string* mutable_job_id();
  PROTOBUF_NODISCARD std::string* release_job_id();
  void set_allocated_job_id(std::string* value);

  private:
  const std::string& _internal_job_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_job_id(
      const std::string& value);
  std::string* _internal_mutable_job_id();

  public:
  // @@protoc_insertion_point(class_scope:protobuff.JobStatusRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      41, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const JobStatusRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr job_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuff_2eproto;
};
// -------------------------------------------------------------------

class JobStatusReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuff.JobStatusReply) */ {
 public:
  inline JobStatusReply() : JobStatusReply(nullptr) {}
  ~JobStatusReply() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(JobStatusReply* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(JobStatusReply));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR JobStatusReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline JobStatusReply(const JobStatusReply& from) : JobStatusReply(nullptr, from) {}
  inline JobStatusReply(JobStatusReply&& from) noexcept
      : JobStatusReply(nullptr, std::move(from)) {}
  inline JobStatusReply& operator=(const JobStatusReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobStatusReply& operator=(JobStatusReply&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobStatusReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobStatusReply* internal_default_instance() {
    return reinterpret_cast<const JobStatusReply*>(
        &_JobStatusReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(JobStatusReply& a, JobStatusReply& b) { a.Swap(&b); }
  inline void Swap(JobStatusReply* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobStatusReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobStatusReply* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<JobStatusReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JobStatusReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const JobStatusReply& from) { JobStatusReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(JobStatusReply* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "protobuff.JobStatusReply"; }

 protected:
  explicit JobStatusReply(::google::protobuf::Arena* arena);
  JobStatusReply(::google::protobuf::Arena* arena, const JobStatusReply& from);
  JobStatusReply(::google::protobuf::Arena* arena, JobStatusReply&& from) noexcept
      : JobStatusReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kFinalResultFieldNumber = 3,
    kIsCompleteFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bytes final_result = 3;
  void clear_final_result() ;
  const std::string& final_result() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_final_result(Arg_&& arg, Args_... args);
  std::string* mutable_final_result();
  PROTOBUF_NODISCARD std::string* release_final_result();
  void set_allocated_final_result(std::string* value);

  private:
  const std::string& _internal_final_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_final_result(
      const std::string& value);
  std::string* _internal_mutable_final_result();

  public:
  // bool is_complete = 1;
  void clear_is_complete() ;
  bool is_complete() const;
  void set_is_complete(bool value);

  private:
  bool _internal_is_complete() const;
  void _internal_set_is_complete(bool value);

  public:
  // @@protoc_insertion_point(class_scope:protobuff.JobStatusReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const JobStatusReply& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr final_result_;
    bool is_complete_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuff_2eproto;
};
// -------------------------------------------------------------------

class DeviceRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuff.DeviceRequest) */ {
 public:
  inline DeviceRequest() : DeviceRequest(nullptr) {}
  ~DeviceRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DeviceRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DeviceRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeviceRequest(const DeviceRequest& from) : DeviceRequest(nullptr, from) {}
  inline DeviceRequest(DeviceRequest&& from) noexcept
      : DeviceRequest(nullptr, std::move(from)) {}
  inline DeviceRequest& operator=(const DeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceRequest& operator=(DeviceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceRequest* internal_default_instance() {
    return reinterpret_cast<const DeviceRequest*>(
        &_DeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(DeviceRequest& a, DeviceRequest& b) { a.Swap(&b); }
  inline void Swap(DeviceRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DeviceRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeviceRequest& from) { DeviceRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DeviceRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "protobuff.DeviceRequest"; }

 protected:
  explicit DeviceRequest(::google::protobuf::Arena* arena);
  DeviceRequest(::google::protobuf::Arena* arena, const DeviceRequest& from);
  DeviceRequest(::google::protobuf::Arena* arena, DeviceRequest&& from) noexcept
      : DeviceRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDeviceIdFieldNumber = 1,
  };
  // string device_id = 1;
  void clear_device_id() ;
  const std::string& device_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_id(Arg_&& arg, Args_... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* value);

  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(
      const std::string& value);
  std::string* _internal_mutable_device_id();

  public:
  // @@protoc_insertion_point(class_scope:protobuff.DeviceRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      41, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeviceRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr device_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuff_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TaskRequest

// string job_id = 2;
inline void TaskRequest::clear_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.ClearToEmpty();
}
inline const std::string& TaskRequest::job_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuff.TaskRequest.job_id)
  return _internal_job_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskRequest::set_job_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuff.TaskRequest.job_id)
}
inline std::string* TaskRequest::mutable_job_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_job_id();
  // @@protoc_insertion_point(field_mutable:protobuff.TaskRequest.job_id)
  return _s;
}
inline const std::string& TaskRequest::_internal_job_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.job_id_.Get();
}
inline void TaskRequest::_internal_set_job_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.Set(value, GetArena());
}
inline std::string* TaskRequest::_internal_mutable_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.job_id_.Mutable( GetArena());
}
inline std::string* TaskRequest::release_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuff.TaskRequest.job_id)
  return _impl_.job_id_.Release();
}
inline void TaskRequest::set_allocated_job_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.job_id_.IsDefault()) {
    _impl_.job_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuff.TaskRequest.job_id)
}

// string operation = 3;
inline void TaskRequest::clear_operation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_.ClearToEmpty();
}
inline const std::string& TaskRequest::operation() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuff.TaskRequest.operation)
  return _internal_operation();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskRequest::set_operation(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuff.TaskRequest.operation)
}
inline std::string* TaskRequest::mutable_operation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_operation();
  // @@protoc_insertion_point(field_mutable:protobuff.TaskRequest.operation)
  return _s;
}
inline const std::string& TaskRequest::_internal_operation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.operation_.Get();
}
inline void TaskRequest::_internal_set_operation(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_.Set(value, GetArena());
}
inline std::string* TaskRequest::_internal_mutable_operation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.operation_.Mutable( GetArena());
}
inline std::string* TaskRequest::release_operation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuff.TaskRequest.operation)
  return _impl_.operation_.Release();
}
inline void TaskRequest::set_allocated_operation(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.operation_.IsDefault()) {
    _impl_.operation_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuff.TaskRequest.operation)
}

// bytes a_data = 4;
inline void TaskRequest::clear_a_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.a_data_.ClearToEmpty();
}
inline const std::string& TaskRequest::a_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuff.TaskRequest.a_data)
  return _internal_a_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskRequest::set_a_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.a_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuff.TaskRequest.a_data)
}
inline std::string* TaskRequest::mutable_a_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_a_data();
  // @@protoc_insertion_point(field_mutable:protobuff.TaskRequest.a_data)
  return _s;
}
inline const std::string& TaskRequest::_internal_a_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.a_data_.Get();
}
inline void TaskRequest::_internal_set_a_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.a_data_.Set(value, GetArena());
}
inline std::string* TaskRequest::_internal_mutable_a_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.a_data_.Mutable( GetArena());
}
inline std::string* TaskRequest::release_a_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuff.TaskRequest.a_data)
  return _impl_.a_data_.Release();
}
inline void TaskRequest::set_allocated_a_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.a_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.a_data_.IsDefault()) {
    _impl_.a_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuff.TaskRequest.a_data)
}

// bytes b_data = 5;
inline void TaskRequest::clear_b_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.b_data_.ClearToEmpty();
}
inline const std::string& TaskRequest::b_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuff.TaskRequest.b_data)
  return _internal_b_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskRequest::set_b_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.b_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuff.TaskRequest.b_data)
}
inline std::string* TaskRequest::mutable_b_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_b_data();
  // @@protoc_insertion_point(field_mutable:protobuff.TaskRequest.b_data)
  return _s;
}
inline const std::string& TaskRequest::_internal_b_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.b_data_.Get();
}
inline void TaskRequest::_internal_set_b_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.b_data_.Set(value, GetArena());
}
inline std::string* TaskRequest::_internal_mutable_b_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.b_data_.Mutable( GetArena());
}
inline std::string* TaskRequest::release_b_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuff.TaskRequest.b_data)
  return _impl_.b_data_.Release();
}
inline void TaskRequest::set_allocated_b_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.b_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.b_data_.IsDefault()) {
    _impl_.b_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuff.TaskRequest.b_data)
}

// optional bytes scale_bytes = 6;
inline bool TaskRequest::has_scale_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TaskRequest::clear_scale_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scale_bytes_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TaskRequest::scale_bytes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuff.TaskRequest.scale_bytes)
  return _internal_scale_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskRequest::set_scale_bytes(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.scale_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuff.TaskRequest.scale_bytes)
}
inline std::string* TaskRequest::mutable_scale_bytes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_scale_bytes();
  // @@protoc_insertion_point(field_mutable:protobuff.TaskRequest.scale_bytes)
  return _s;
}
inline const std::string& TaskRequest::_internal_scale_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scale_bytes_.Get();
}
inline void TaskRequest::_internal_set_scale_bytes(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.scale_bytes_.Set(value, GetArena());
}
inline std::string* TaskRequest::_internal_mutable_scale_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.scale_bytes_.Mutable( GetArena());
}
inline std::string* TaskRequest::release_scale_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuff.TaskRequest.scale_bytes)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.scale_bytes_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.scale_bytes_.Set("", GetArena());
  }
  return released;
}
inline void TaskRequest::set_allocated_scale_bytes(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.scale_bytes_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.scale_bytes_.IsDefault()) {
    _impl_.scale_bytes_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuff.TaskRequest.scale_bytes)
}

// optional float scale_scalar = 7;
inline bool TaskRequest::has_scale_scalar() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TaskRequest::clear_scale_scalar() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scale_scalar_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float TaskRequest::scale_scalar() const {
  // @@protoc_insertion_point(field_get:protobuff.TaskRequest.scale_scalar)
  return _internal_scale_scalar();
}
inline void TaskRequest::set_scale_scalar(float value) {
  _internal_set_scale_scalar(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:protobuff.TaskRequest.scale_scalar)
}
inline float TaskRequest::_internal_scale_scalar() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scale_scalar_;
}
inline void TaskRequest::_internal_set_scale_scalar(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scale_scalar_ = value;
}

// int32 row_splits = 8;
inline void TaskRequest::clear_row_splits() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.row_splits_ = 0;
}
inline ::int32_t TaskRequest::row_splits() const {
  // @@protoc_insertion_point(field_get:protobuff.TaskRequest.row_splits)
  return _internal_row_splits();
}
inline void TaskRequest::set_row_splits(::int32_t value) {
  _internal_set_row_splits(value);
  // @@protoc_insertion_point(field_set:protobuff.TaskRequest.row_splits)
}
inline ::int32_t TaskRequest::_internal_row_splits() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.row_splits_;
}
inline void TaskRequest::_internal_set_row_splits(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.row_splits_ = value;
}

// int32 col_splits = 9;
inline void TaskRequest::clear_col_splits() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.col_splits_ = 0;
}
inline ::int32_t TaskRequest::col_splits() const {
  // @@protoc_insertion_point(field_get:protobuff.TaskRequest.col_splits)
  return _internal_col_splits();
}
inline void TaskRequest::set_col_splits(::int32_t value) {
  _internal_set_col_splits(value);
  // @@protoc_insertion_point(field_set:protobuff.TaskRequest.col_splits)
}
inline ::int32_t TaskRequest::_internal_col_splits() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.col_splits_;
}
inline void TaskRequest::_internal_set_col_splits(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.col_splits_ = value;
}

// int32 m = 10;
inline void TaskRequest::clear_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.m_ = 0;
}
inline ::int32_t TaskRequest::m() const {
  // @@protoc_insertion_point(field_get:protobuff.TaskRequest.m)
  return _internal_m();
}
inline void TaskRequest::set_m(::int32_t value) {
  _internal_set_m(value);
  // @@protoc_insertion_point(field_set:protobuff.TaskRequest.m)
}
inline ::int32_t TaskRequest::_internal_m() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.m_;
}
inline void TaskRequest::_internal_set_m(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.m_ = value;
}

// int32 n = 11;
inline void TaskRequest::clear_n() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.n_ = 0;
}
inline ::int32_t TaskRequest::n() const {
  // @@protoc_insertion_point(field_get:protobuff.TaskRequest.n)
  return _internal_n();
}
inline void TaskRequest::set_n(::int32_t value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:protobuff.TaskRequest.n)
}
inline ::int32_t TaskRequest::_internal_n() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.n_;
}
inline void TaskRequest::_internal_set_n(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.n_ = value;
}

// int32 d = 12;
inline void TaskRequest::clear_d() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.d_ = 0;
}
inline ::int32_t TaskRequest::d() const {
  // @@protoc_insertion_point(field_get:protobuff.TaskRequest.d)
  return _internal_d();
}
inline void TaskRequest::set_d(::int32_t value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:protobuff.TaskRequest.d)
}
inline ::int32_t TaskRequest::_internal_d() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.d_;
}
inline void TaskRequest::_internal_set_d(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.d_ = value;
}

// -------------------------------------------------------------------

// TaskResponse

// bool accepted = 1;
inline void TaskResponse::clear_accepted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accepted_ = false;
}
inline bool TaskResponse::accepted() const {
  // @@protoc_insertion_point(field_get:protobuff.TaskResponse.accepted)
  return _internal_accepted();
}
inline void TaskResponse::set_accepted(bool value) {
  _internal_set_accepted(value);
  // @@protoc_insertion_point(field_set:protobuff.TaskResponse.accepted)
}
inline bool TaskResponse::_internal_accepted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.accepted_;
}
inline void TaskResponse::_internal_set_accepted(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accepted_ = value;
}

// string message = 2;
inline void TaskResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& TaskResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuff.TaskResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuff.TaskResponse.message)
}
inline std::string* TaskResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:protobuff.TaskResponse.message)
  return _s;
}
inline const std::string& TaskResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void TaskResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* TaskResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* TaskResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuff.TaskResponse.message)
  return _impl_.message_.Release();
}
inline void TaskResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuff.TaskResponse.message)
}

// -------------------------------------------------------------------

// DeviceRequest

// string device_id = 1;
inline void DeviceRequest::clear_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.ClearToEmpty();
}
inline const std::string& DeviceRequest::device_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuff.DeviceRequest.device_id)
  return _internal_device_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceRequest::set_device_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuff.DeviceRequest.device_id)
}
inline std::string* DeviceRequest::mutable_device_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:protobuff.DeviceRequest.device_id)
  return _s;
}
inline const std::string& DeviceRequest::_internal_device_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_id_.Get();
}
inline void DeviceRequest::_internal_set_device_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(value, GetArena());
}
inline std::string* DeviceRequest::_internal_mutable_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.device_id_.Mutable( GetArena());
}
inline std::string* DeviceRequest::release_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuff.DeviceRequest.device_id)
  return _impl_.device_id_.Release();
}
inline void DeviceRequest::set_allocated_device_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.device_id_.IsDefault()) {
    _impl_.device_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuff.DeviceRequest.device_id)
}

// -------------------------------------------------------------------

// TaskAssignment

// string job_id = 1;
inline void TaskAssignment::clear_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.ClearToEmpty();
}
inline const std::string& TaskAssignment::job_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuff.TaskAssignment.job_id)
  return _internal_job_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskAssignment::set_job_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuff.TaskAssignment.job_id)
}
inline std::string* TaskAssignment::mutable_job_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_job_id();
  // @@protoc_insertion_point(field_mutable:protobuff.TaskAssignment.job_id)
  return _s;
}
inline const std::string& TaskAssignment::_internal_job_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.job_id_.Get();
}
inline void TaskAssignment::_internal_set_job_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.Set(value, GetArena());
}
inline std::string* TaskAssignment::_internal_mutable_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.job_id_.Mutable( GetArena());
}
inline std::string* TaskAssignment::release_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuff.TaskAssignment.job_id)
  return _impl_.job_id_.Release();
}
inline void TaskAssignment::set_allocated_job_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.job_id_.IsDefault()) {
    _impl_.job_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuff.TaskAssignment.job_id)
}

// string task_id = 2;
inline void TaskAssignment::clear_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.ClearToEmpty();
}
inline const std::string& TaskAssignment::task_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuff.TaskAssignment.task_id)
  return _internal_task_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskAssignment::set_task_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuff.TaskAssignment.task_id)
}
inline std::string* TaskAssignment::mutable_task_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:protobuff.TaskAssignment.task_id)
  return _s;
}
inline const std::string& TaskAssignment::_internal_task_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.task_id_.Get();
}
inline void TaskAssignment::_internal_set_task_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.Set(value, GetArena());
}
inline std::string* TaskAssignment::_internal_mutable_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.task_id_.Mutable( GetArena());
}
inline std::string* TaskAssignment::release_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuff.TaskAssignment.task_id)
  return _impl_.task_id_.Release();
}
inline void TaskAssignment::set_allocated_task_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuff.TaskAssignment.task_id)
}

// string operation = 3;
inline void TaskAssignment::clear_operation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_.ClearToEmpty();
}
inline const std::string& TaskAssignment::operation() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuff.TaskAssignment.operation)
  return _internal_operation();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskAssignment::set_operation(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuff.TaskAssignment.operation)
}
inline std::string* TaskAssignment::mutable_operation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_operation();
  // @@protoc_insertion_point(field_mutable:protobuff.TaskAssignment.operation)
  return _s;
}
inline const std::string& TaskAssignment::_internal_operation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.operation_.Get();
}
inline void TaskAssignment::_internal_set_operation(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_.Set(value, GetArena());
}
inline std::string* TaskAssignment::_internal_mutable_operation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.operation_.Mutable( GetArena());
}
inline std::string* TaskAssignment::release_operation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuff.TaskAssignment.operation)
  return _impl_.operation_.Release();
}
inline void TaskAssignment::set_allocated_operation(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.operation_.IsDefault()) {
    _impl_.operation_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuff.TaskAssignment.operation)
}

// bytes a_data = 4;
inline void TaskAssignment::clear_a_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.a_data_.ClearToEmpty();
}
inline const std::string& TaskAssignment::a_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuff.TaskAssignment.a_data)
  return _internal_a_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskAssignment::set_a_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.a_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuff.TaskAssignment.a_data)
}
inline std::string* TaskAssignment::mutable_a_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_a_data();
  // @@protoc_insertion_point(field_mutable:protobuff.TaskAssignment.a_data)
  return _s;
}
inline const std::string& TaskAssignment::_internal_a_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.a_data_.Get();
}
inline void TaskAssignment::_internal_set_a_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.a_data_.Set(value, GetArena());
}
inline std::string* TaskAssignment::_internal_mutable_a_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.a_data_.Mutable( GetArena());
}
inline std::string* TaskAssignment::release_a_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuff.TaskAssignment.a_data)
  return _impl_.a_data_.Release();
}
inline void TaskAssignment::set_allocated_a_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.a_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.a_data_.IsDefault()) {
    _impl_.a_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuff.TaskAssignment.a_data)
}

// bytes b_data = 5;
inline void TaskAssignment::clear_b_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.b_data_.ClearToEmpty();
}
inline const std::string& TaskAssignment::b_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuff.TaskAssignment.b_data)
  return _internal_b_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskAssignment::set_b_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.b_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuff.TaskAssignment.b_data)
}
inline std::string* TaskAssignment::mutable_b_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_b_data();
  // @@protoc_insertion_point(field_mutable:protobuff.TaskAssignment.b_data)
  return _s;
}
inline const std::string& TaskAssignment::_internal_b_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.b_data_.Get();
}
inline void TaskAssignment::_internal_set_b_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.b_data_.Set(value, GetArena());
}
inline std::string* TaskAssignment::_internal_mutable_b_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.b_data_.Mutable( GetArena());
}
inline std::string* TaskAssignment::release_b_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuff.TaskAssignment.b_data)
  return _impl_.b_data_.Release();
}
inline void TaskAssignment::set_allocated_b_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.b_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.b_data_.IsDefault()) {
    _impl_.b_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuff.TaskAssignment.b_data)
}

// optional bytes scale_bytes = 6;
inline bool TaskAssignment::has_scale_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TaskAssignment::clear_scale_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scale_bytes_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TaskAssignment::scale_bytes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuff.TaskAssignment.scale_bytes)
  return _internal_scale_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskAssignment::set_scale_bytes(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.scale_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuff.TaskAssignment.scale_bytes)
}
inline std::string* TaskAssignment::mutable_scale_bytes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_scale_bytes();
  // @@protoc_insertion_point(field_mutable:protobuff.TaskAssignment.scale_bytes)
  return _s;
}
inline const std::string& TaskAssignment::_internal_scale_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scale_bytes_.Get();
}
inline void TaskAssignment::_internal_set_scale_bytes(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.scale_bytes_.Set(value, GetArena());
}
inline std::string* TaskAssignment::_internal_mutable_scale_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.scale_bytes_.Mutable( GetArena());
}
inline std::string* TaskAssignment::release_scale_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuff.TaskAssignment.scale_bytes)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.scale_bytes_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.scale_bytes_.Set("", GetArena());
  }
  return released;
}
inline void TaskAssignment::set_allocated_scale_bytes(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.scale_bytes_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.scale_bytes_.IsDefault()) {
    _impl_.scale_bytes_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuff.TaskAssignment.scale_bytes)
}

// optional float scale_scalar = 7;
inline bool TaskAssignment::has_scale_scalar() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TaskAssignment::clear_scale_scalar() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scale_scalar_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float TaskAssignment::scale_scalar() const {
  // @@protoc_insertion_point(field_get:protobuff.TaskAssignment.scale_scalar)
  return _internal_scale_scalar();
}
inline void TaskAssignment::set_scale_scalar(float value) {
  _internal_set_scale_scalar(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:protobuff.TaskAssignment.scale_scalar)
}
inline float TaskAssignment::_internal_scale_scalar() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scale_scalar_;
}
inline void TaskAssignment::_internal_set_scale_scalar(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scale_scalar_ = value;
}

// int32 m = 8;
inline void TaskAssignment::clear_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.m_ = 0;
}
inline ::int32_t TaskAssignment::m() const {
  // @@protoc_insertion_point(field_get:protobuff.TaskAssignment.m)
  return _internal_m();
}
inline void TaskAssignment::set_m(::int32_t value) {
  _internal_set_m(value);
  // @@protoc_insertion_point(field_set:protobuff.TaskAssignment.m)
}
inline ::int32_t TaskAssignment::_internal_m() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.m_;
}
inline void TaskAssignment::_internal_set_m(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.m_ = value;
}

// int32 n = 9;
inline void TaskAssignment::clear_n() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.n_ = 0;
}
inline ::int32_t TaskAssignment::n() const {
  // @@protoc_insertion_point(field_get:protobuff.TaskAssignment.n)
  return _internal_n();
}
inline void TaskAssignment::set_n(::int32_t value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:protobuff.TaskAssignment.n)
}
inline ::int32_t TaskAssignment::_internal_n() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.n_;
}
inline void TaskAssignment::_internal_set_n(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.n_ = value;
}

// int32 d = 10;
inline void TaskAssignment::clear_d() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.d_ = 0;
}
inline ::int32_t TaskAssignment::d() const {
  // @@protoc_insertion_point(field_get:protobuff.TaskAssignment.d)
  return _internal_d();
}
inline void TaskAssignment::set_d(::int32_t value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:protobuff.TaskAssignment.d)
}
inline ::int32_t TaskAssignment::_internal_d() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.d_;
}
inline void TaskAssignment::_internal_set_d(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.d_ = value;
}

// -------------------------------------------------------------------

// TaskResult

// string device_id = 1;
inline void TaskResult::clear_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.ClearToEmpty();
}
inline const std::string& TaskResult::device_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuff.TaskResult.device_id)
  return _internal_device_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskResult::set_device_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuff.TaskResult.device_id)
}
inline std::string* TaskResult::mutable_device_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:protobuff.TaskResult.device_id)
  return _s;
}
inline const std::string& TaskResult::_internal_device_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_id_.Get();
}
inline void TaskResult::_internal_set_device_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(value, GetArena());
}
inline std::string* TaskResult::_internal_mutable_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.device_id_.Mutable( GetArena());
}
inline std::string* TaskResult::release_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuff.TaskResult.device_id)
  return _impl_.device_id_.Release();
}
inline void TaskResult::set_allocated_device_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.device_id_.IsDefault()) {
    _impl_.device_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuff.TaskResult.device_id)
}

// string job_id = 2;
inline void TaskResult::clear_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.ClearToEmpty();
}
inline const std::string& TaskResult::job_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuff.TaskResult.job_id)
  return _internal_job_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskResult::set_job_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuff.TaskResult.job_id)
}
inline std::string* TaskResult::mutable_job_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_job_id();
  // @@protoc_insertion_point(field_mutable:protobuff.TaskResult.job_id)
  return _s;
}
inline const std::string& TaskResult::_internal_job_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.job_id_.Get();
}
inline void TaskResult::_internal_set_job_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.Set(value, GetArena());
}
inline std::string* TaskResult::_internal_mutable_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.job_id_.Mutable( GetArena());
}
inline std::string* TaskResult::release_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuff.TaskResult.job_id)
  return _impl_.job_id_.Release();
}
inline void TaskResult::set_allocated_job_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.job_id_.IsDefault()) {
    _impl_.job_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuff.TaskResult.job_id)
}

// string task_id = 3;
inline void TaskResult::clear_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.ClearToEmpty();
}
inline const std::string& TaskResult::task_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuff.TaskResult.task_id)
  return _internal_task_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskResult::set_task_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuff.TaskResult.task_id)
}
inline std::string* TaskResult::mutable_task_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:protobuff.TaskResult.task_id)
  return _s;
}
inline const std::string& TaskResult::_internal_task_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.task_id_.Get();
}
inline void TaskResult::_internal_set_task_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.Set(value, GetArena());
}
inline std::string* TaskResult::_internal_mutable_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.task_id_.Mutable( GetArena());
}
inline std::string* TaskResult::release_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuff.TaskResult.task_id)
  return _impl_.task_id_.Release();
}
inline void TaskResult::set_allocated_task_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuff.TaskResult.task_id)
}

// bytes result_data = 4;
inline void TaskResult::clear_result_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_data_.ClearToEmpty();
}
inline const std::string& TaskResult::result_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuff.TaskResult.result_data)
  return _internal_result_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskResult::set_result_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuff.TaskResult.result_data)
}
inline std::string* TaskResult::mutable_result_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_result_data();
  // @@protoc_insertion_point(field_mutable:protobuff.TaskResult.result_data)
  return _s;
}
inline const std::string& TaskResult::_internal_result_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.result_data_.Get();
}
inline void TaskResult::_internal_set_result_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_data_.Set(value, GetArena());
}
inline std::string* TaskResult::_internal_mutable_result_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.result_data_.Mutable( GetArena());
}
inline std::string* TaskResult::release_result_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuff.TaskResult.result_data)
  return _impl_.result_data_.Release();
}
inline void TaskResult::set_allocated_result_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.result_data_.IsDefault()) {
    _impl_.result_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuff.TaskResult.result_data)
}

// int32 flops = 5;
inline void TaskResult::clear_flops() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.flops_ = 0;
}
inline ::int32_t TaskResult::flops() const {
  // @@protoc_insertion_point(field_get:protobuff.TaskResult.flops)
  return _internal_flops();
}
inline void TaskResult::set_flops(::int32_t value) {
  _internal_set_flops(value);
  // @@protoc_insertion_point(field_set:protobuff.TaskResult.flops)
}
inline ::int32_t TaskResult::_internal_flops() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.flops_;
}
inline void TaskResult::_internal_set_flops(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.flops_ = value;
}

// -------------------------------------------------------------------

// ResultResponse

// bool success = 1;
inline void ResultResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool ResultResponse::success() const {
  // @@protoc_insertion_point(field_get:protobuff.ResultResponse.success)
  return _internal_success();
}
inline void ResultResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:protobuff.ResultResponse.success)
}
inline bool ResultResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void ResultResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void ResultResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ResultResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuff.ResultResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResultResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuff.ResultResponse.message)
}
inline std::string* ResultResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:protobuff.ResultResponse.message)
  return _s;
}
inline const std::string& ResultResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void ResultResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* ResultResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* ResultResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuff.ResultResponse.message)
  return _impl_.message_.Release();
}
inline void ResultResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuff.ResultResponse.message)
}

// -------------------------------------------------------------------

// JobStatusRequest

// string job_id = 1;
inline void JobStatusRequest::clear_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.ClearToEmpty();
}
inline const std::string& JobStatusRequest::job_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuff.JobStatusRequest.job_id)
  return _internal_job_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JobStatusRequest::set_job_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuff.JobStatusRequest.job_id)
}
inline std::string* JobStatusRequest::mutable_job_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_job_id();
  // @@protoc_insertion_point(field_mutable:protobuff.JobStatusRequest.job_id)
  return _s;
}
inline const std::string& JobStatusRequest::_internal_job_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.job_id_.Get();
}
inline void JobStatusRequest::_internal_set_job_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.Set(value, GetArena());
}
inline std::string* JobStatusRequest::_internal_mutable_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.job_id_.Mutable( GetArena());
}
inline std::string* JobStatusRequest::release_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuff.JobStatusRequest.job_id)
  return _impl_.job_id_.Release();
}
inline void JobStatusRequest::set_allocated_job_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.job_id_.IsDefault()) {
    _impl_.job_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuff.JobStatusRequest.job_id)
}

// -------------------------------------------------------------------

// JobStatusReply

// bool is_complete = 1;
inline void JobStatusReply::clear_is_complete() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_complete_ = false;
}
inline bool JobStatusReply::is_complete() const {
  // @@protoc_insertion_point(field_get:protobuff.JobStatusReply.is_complete)
  return _internal_is_complete();
}
inline void JobStatusReply::set_is_complete(bool value) {
  _internal_set_is_complete(value);
  // @@protoc_insertion_point(field_set:protobuff.JobStatusReply.is_complete)
}
inline bool JobStatusReply::_internal_is_complete() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_complete_;
}
inline void JobStatusReply::_internal_set_is_complete(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_complete_ = value;
}

// string message = 2;
inline void JobStatusReply::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& JobStatusReply::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuff.JobStatusReply.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JobStatusReply::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuff.JobStatusReply.message)
}
inline std::string* JobStatusReply::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:protobuff.JobStatusReply.message)
  return _s;
}
inline const std::string& JobStatusReply::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void JobStatusReply::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* JobStatusReply::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* JobStatusReply::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuff.JobStatusReply.message)
  return _impl_.message_.Release();
}
inline void JobStatusReply::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuff.JobStatusReply.message)
}

// bytes final_result = 3;
inline void JobStatusReply::clear_final_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.final_result_.ClearToEmpty();
}
inline const std::string& JobStatusReply::final_result() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuff.JobStatusReply.final_result)
  return _internal_final_result();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JobStatusReply::set_final_result(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.final_result_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuff.JobStatusReply.final_result)
}
inline std::string* JobStatusReply::mutable_final_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_final_result();
  // @@protoc_insertion_point(field_mutable:protobuff.JobStatusReply.final_result)
  return _s;
}
inline const std::string& JobStatusReply::_internal_final_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.final_result_.Get();
}
inline void JobStatusReply::_internal_set_final_result(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.final_result_.Set(value, GetArena());
}
inline std::string* JobStatusReply::_internal_mutable_final_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.final_result_.Mutable( GetArena());
}
inline std::string* JobStatusReply::release_final_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuff.JobStatusReply.final_result)
  return _impl_.final_result_.Release();
}
inline void JobStatusReply::set_allocated_final_result(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.final_result_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.final_result_.IsDefault()) {
    _impl_.final_result_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuff.JobStatusReply.final_result)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuff


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // protobuff_2eproto_2epb_2eh
